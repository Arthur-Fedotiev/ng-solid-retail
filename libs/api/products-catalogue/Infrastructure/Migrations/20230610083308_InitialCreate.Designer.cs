// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sr.Api.ProductsCatalogue.Infrastructure;

#nullable disable

namespace Sr.Api.ProductsCatalogue.Infrastructure.Migrations
{
    [DbContext(typeof(ProductsCatalogueDbContext))]
    [Migration("20230610083308_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Retailer")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasDiscriminator<int>("Category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Book", b =>
                {
                    b.HasBaseType("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Product");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Clothing", b =>
                {
                    b.HasBaseType("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Product");

                    b.Property<string>("ClothingSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Shoes", b =>
                {
                    b.HasBaseType("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Product");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ShoesSize")
                        .HasColumnType("real");

                    b.ToTable("Products", t =>
                        {
                            t.Property("Color")
                                .HasColumnName("Shoes_Color");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sr.Api.ProductsCatalogue.Domain.Product.AggregateRoot.Product", b =>
                {
                    b.OwnsMany("Sr.Api.ProductsCatalogue.Domain.Product.ValueObjects.ProductPrice", "Prices", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Tier")
                                .HasColumnType("int");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("ProductPrice");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("Sr.Api.ProductsCatalogue.Domain.Product.ValueObjects.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("ProductPriceProductId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("ProductPriceId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Code")
                                        .HasColumnType("int");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ProductPriceProductId", "ProductPriceId");

                                    b2.ToTable("ProductPrice");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductPriceProductId", "ProductPriceId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
